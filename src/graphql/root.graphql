type Query {
  user: UserResult!
  users: [User!]!
  habit(id: ObjectId!): HabitResult!
  habits(userId: ObjectId!): [Habit!]!
  habitLogs(habitId: ObjectId!): [HabitLog!]!
}

type Mutation {
  register(input: RegisterInput!): RegisterResult!
  login(email: String!, password: String!): LoginResult!
  refresh(token: String!): RefreshTokenResult!
  logout(token: String!): Boolean!

  deleteUser: UserResult!
  updateUser(username: String, firstName: String, lastName: String): UserResult!

  createHabit(input: CreateHabitInput!): CreteHabitResult!
  deleteHabit: DeleteHabitResult!

  createHabitLog(habitId: ObjectId!, status: Status!): HabitLogResult!
}

# MARK: ----- Scalars -----

scalar Date
scalar ObjectId

# MARK: ----- Union results -----

union RefreshTokenResult = RefreshPayload | InvalidRefreshTokenError

union RegisterResult = AuthPayload | UserAlreadyExistsError
union LoginResult = AuthPayload | UserNotFoundError | InvalidInputError

union UserResult = User | UserNotFoundError

union HabitResult = Habit | HabitNotFoundError | UserNotFoundError
union DeleteHabitResult = Habit | HabitNotFoundError | UserNotFoundError
union CreteHabitResult = Habit | UserNotFoundError | HabitAlreadyExistsError

union HabitLogResult =
    HabitLog
  | HabitNotFoundError
  | HabitLogAlreadyExistsError

# MARK: ----- Enums -----

enum Status {
  COMPLETED
  FAILED
}

enum Regularity {
  DAILY
  WEEKLY
  MONTHLY
}

# MARK: ----- Inputs -----

input RegisterInput {
  email: String!
  password: String!
}

input CreateHabitInput {
  title: String!
  description: String
  regularity: Regularity
}

# MARK: ----- Errors -----

type InvalidInputError {
  _: Boolean
}

type RefreshTokenNotFoundError {
  _: Boolean
}
type InvalidRefreshTokenError {
  _: Boolean
}

type UserNotFoundError {
  _: Boolean
}
type UserAlreadyExistsError {
  _: Boolean
}

type HabitNotFoundError {
  _: Boolean
}
type HabitAlreadyExistsError {
  _: Boolean
}

type HabitLogAlreadyExistsError {
  _: Boolean
}

# MARK: ----- Entities -----

type User {
  id: ObjectId!
  email: String!
  username: String
  firstName: String
  lastName: String
  createdAt: Date!
  updatedAt: Date!
  habits: [Habit!]!
}

type AuthPayload {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type RefreshPayload {
  accessToken: String!
  refreshToken: String!
}

type Habit {
  id: ObjectId!
  userId: ObjectId!
  title: String!
  description: String
  regularity: Regularity
  createdAt: Date!
  currentStreak: Int!
  longestStreak: Int!
  habitLogs: [HabitLog!]!
}

type HabitLog {
  id: ObjectId!
  habitId: ObjectId!
  status: Status!
  createdAt: Date!
}
