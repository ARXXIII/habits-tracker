scalar Date
scalar ObjectId

type Query {
  health: String!
  habits: [Habit]!
  habit(id: ObjectId!): Habit
}

enum Status {
  COMPLETED
  FAILED
}

enum Regularity {
  DAILY
  WEEKLY
  MONTHLY
}

type Habit {
  id: ObjectId!
  title: String!
  description: String
  regularity: Regularity
  createdAt: Date!
  logs: [HabitLog!]!
}

type HabitLog {
  id: ObjectId!
  habitId: ObjectId!
  status: Status
  createdAt: Date!
}

type HabitLogAlreadyExists {
  message: String!
  existingLogId: ObjectId
}

type HabitLogNotFound {
  message: String!
}

input CreateHabit {
  title: String!
  description: String
  regularity: Regularity
}

type Mutation {
  createHabit(input: CreateHabit!): Habit!
  updateHabitStatus(habitId: ObjectId!, status: Status): UpdateHabitStatus!
}

union UpdateHabitStatus = HabitLog | HabitLogAlreadyExists
