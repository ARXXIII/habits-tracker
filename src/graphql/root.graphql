scalar Date
scalar ObjectId

type Query {
  health: String!
  user(id: ObjectId!): User
  users: [User!]!
  habit(id: ObjectId!): Habit
  habits: [Habit]!
  habitsByUser(userId: ObjectId!): [Habit!]!
}

type Mutation {
  createUser(input: CreateUser!): User!
  deleteUser(id: ObjectId!): UserUnion!
  updateUser(
    id: ObjectId!
    username: String
    firstName: String
    lastName: String
  ): UserUnion!
  createHabit(input: CreateHabit!): Habit!
  logHabit(
    userId: ObjectId!
    habitId: ObjectId!
    status: Status
  ): LogHabitUnion!
}

union UserUnion = User | NotFoundError
union LogHabitUnion = HabitLog | HabitLogAlreadyExists | NotFoundError

enum Status {
  COMPLETED
  FAILED
}

enum Regularity {
  DAILY
  WEEKLY
  MONTHLY
}

input CreateUser {
  email: String!
  username: String!
  firstName: String
  lastName: String
}

type User {
  id: ObjectId!
  email: String!
  username: String!
  firstName: String
  lastName: String
  createdAt: Date!
  updatedAt: Date
  habits: [Habit!]!
}

type NotFoundError {
  id: ObjectId!
  message: String!
}

input CreateHabit {
  userId: ObjectId!
  title: String!
  description: String
  regularity: Regularity
}

type Habit {
  id: ObjectId!
  userId: ObjectId!
  title: String!
  description: String
  regularity: Regularity
  createdAt: Date!
  logs: [HabitLog!]!
}

type HabitLog {
  id: ObjectId!
  habitId: ObjectId!
  status: Status
  createdAt: Date!
}

type HabitLogAlreadyExists {
  logId: ObjectId
  message: String!
}

type UserNotFoundError {
  userId: ObjectId!
  message: String!
}
